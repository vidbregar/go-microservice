// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new shortened URL
	// (POST /url)
	PostUrl(ctx echo.Context) error
	// Redirects to URL that was shortened
	// (GET /url/{shortened})
	GetUrlShortened(ctx echo.Context, shortened string) error
	// Returns microservice version information
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostUrl converts echo context to params.
func (w *ServerInterfaceWrapper) PostUrl(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUrl(ctx)
	return err
}

// GetUrlShortened converts echo context to params.
func (w *ServerInterfaceWrapper) GetUrlShortened(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shortened" -------------
	var shortened string

	err = runtime.BindStyledParameterWithLocation("simple", false, "shortened", runtime.ParamLocationPath, ctx.Param("shortened"), &shortened)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shortened: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUrlShortened(ctx, shortened)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/url", wrapper.PostUrl)
	router.GET(baseURL+"/url/:shortened", wrapper.GetUrlShortened)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xV32/bOAz+VwTePdwBRuz+wB3gt3bYhgJdV2TLMKDog2oxiYpYUik5bRD4fx8oO47d",
	"uC0wFHuKJVIfP5IfmS0UtnTWoAke8i0QemeNx3g4l2qKDxX6wKfCmoAmfkrnVrqQQVuT3ntr+M4XSywl",
	"f/1NOIcc/kr30Glj9elHIktQ13UCCn1B2jEI5PB9icI7LPRcoxLUhBWP0os7qVYbMbdUyhBQQZ3AlQ2f",
	"bGXUn6flbUUFRl7GBjGPLPhZi8SBGrB8C/gkS7fChqVCyGFm9EOFAtlDxLsESvReLtgaH4rduU7AkXVI",
	"QTftaDC2EDaOvX0gbRbs1iEc2OoEuJSaUEF+A88i3iY7f3t3j0VgrG9LSwENqtn0kgGHFDxbZ7Ti76Yj",
	"kENFGpI3IncPx2KOhsInpwnPwiCUNuG/030wbQIukBij+g1S1Qt8fiB53chnyIlwrXeWgy6s969eD9uh",
	"7N8csuBH2sxthNNhFdUzvRS+7Q+Js+uLHkIO2eRokjER69BIpyGHk0k2ySABJ8MyJpC2ZXK2mWlOLs7L",
	"hYIcrq2PPWroog/nVm3ebca4yyMTxkkFK+6wS02JRx2WQhpho5NciSiGjZhdXfwUQZfogywd9MsaqMJY",
	"597+Os6O3o39YC5G0ujsghMqCGW7q06z7CXsjmza27RxmVRlKWkDOXyIQF5IYfCxV6GGRRIbmm67+5pD",
	"LXCkt5+RW9uxjKIgWWJA8pDfbF9LB1iKkEcZQQJGllHdPaxhH5JeTUv5dIlmEZaQ/59AqU3v9HxMbp/1",
	"7yQ75p8hsykqTVgEVCybWAcu8unbRe7+NYYl3gH6Fk+EpWz+efYZxlL3BvylEu82x4EQs3cT4i7EiAb3",
	"pmF+oSLjRakLsh5prQsUbS6CVwxvzA6RHcYl8XU3jI2L6FkTgZPFRHyR2oh/HFlVFXz9b+sK7XqGdH0E",
	"9W39KwAA//+U+016dQgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

