// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Checks liveness
	// (GET /livez)
	GetLivez(ctx echo.Context) error
	// Checks readiness
	// (GET /readyz)
	GetReadyz(ctx echo.Context) error
	// Creates a new shortened URL
	// (POST /v1/url)
	PostV1Url(ctx echo.Context) error
	// Redirects to URL that was shortened
	// (GET /v1/url/{shortened})
	GetV1UrlShortened(ctx echo.Context, shortened string) error
	// Returns microservice version information
	// (GET /v1/version)
	GetV1Version(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLivez converts echo context to params.
func (w *ServerInterfaceWrapper) GetLivez(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLivez(ctx)
	return err
}

// GetReadyz converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadyz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadyz(ctx)
	return err
}

// PostV1Url converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1Url(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1Url(ctx)
	return err
}

// GetV1UrlShortened converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1UrlShortened(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shortened" -------------
	var shortened string

	err = runtime.BindStyledParameterWithLocation("simple", false, "shortened", runtime.ParamLocationPath, ctx.Param("shortened"), &shortened)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shortened: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1UrlShortened(ctx, shortened)
	return err
}

// GetV1Version converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Version(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Version(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/livez", wrapper.GetLivez)
	router.GET(baseURL+"/readyz", wrapper.GetReadyz)
	router.POST(baseURL+"/v1/url", wrapper.PostV1Url)
	router.GET(baseURL+"/v1/url/:shortened", wrapper.GetV1UrlShortened)
	router.GET(baseURL+"/v1/version", wrapper.GetV1Version)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RW227jNhD9FWLaR8Gyd4MW0Ntu0UsAYxE4dVAgyAMjjS2mEsmQIyeuoX8vhrpYshUH",
	"KNL2yZJneOacuVEHSE1pjUZNHpIDOPTWaI/h5avMVvhcoSd+S40m1OFRWluoVJIyOn7yRvN/Ps2xlPz0",
	"vcMNJPBdfISOG6uPf3bOOKjrOoIMfeqUZRBI4PcchbeYqo3CTLgmrHiRXjzKrNiLjXGlJMIM6gi+GfrF",
	"VDr772l5U7kUAy9tSGwCCz7WInGgBiw5AL7K0hbYsMwQElhr9VyhQPYQ4b8ISvRebtkaDoruvY7AOmPR",
	"kWrK0WAcgPaWvT05pbfs1iOc2eoIOJXKYQbJPZxEfIg6f/P4hCkx1m8oC8oZahzck6TKvx+i9ZuCvs2N",
	"I9SYrVfLiQBsXbuCn5tiQwKVUxC9F7E7OBVzMhS+WuXwC41CKU0/XB2DKU24RccY1T8gVb3B5w6dV01n",
	"jjk53KnOclbg3fHU5bA9yvHMOQs+pPTGBDhFRWjM1VL4tj5OfLm5HiAkMJ8tZnMmYixqaRUk8Hk2n80h",
	"AispDwLiQu3wL37aYsgsqwuzeJ1BAr8iLYNDNN4xn+bzD5vitncnxvgW3U6lKJQXknk2I1uVpXR7SOCn",
	"HNM/vWCLRu+DNXYos/1FQavG4/9WFIhOK2KTOkraLeK2ma3xE5pujKe7Bc9S01bo6avJ9h8mh6dxQgs3",
	"HxnxiH0LZuJFUS6kFiY4yUKEod2L9bfrPwSpEj3J0sKw/clVWJ8VY/Fh7Ef7a6okPXkWlDqU7XV11XTE",
	"FHZPNh5ctielDEBeSKHxZZChhkVf1fjQm+pLTRvq21MNE+xkiYTOQ3J/uKQJeG9AEmYeItCyDKtogDUu",
	"RjRIbClfl6i3fLX8GEGp9ODtdKc9nBTx8/wT/4yZrTBTDlPCjHsnJIMzffV+pvuvh3GeO0Df4gnKZfMF",
	"clTY5XuwkN/Oc7fr/8X90IWY6MajaSySKqe9KFXqjG93SKtG8KXAd1yPyA5dX4TFATHUD/XfAQAA//9p",
	"UZDSNQoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

